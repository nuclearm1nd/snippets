{
  "xml": {
    "prefix": "xml",
    "body": "<?xml version=\"1.1\" encoding=\"UTF-8\"?>",
    "description": "XML - declares xml version",
    "scope": "xml"
  },
  "databaseChangeLog": {
    "prefix": [
      "databaseChangeLog",
      "dcl"
    ],
    "body": [
      "<databaseChangeLog",
      "  xmlns=\"http://www.liquibase.org/xml/ns/dbchangelog\"",
      "  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"",
      "  xmlns:ext=\"http://www.liquibase.org/xml/ns/dbchangelog-ext\"",
      "  xsi:schemaLocation=\"http://www.liquibase.org/xml/ns/dbchangelog http://artifactory.control-plane-nexus/nexus/repository/extensions/com/epam/digital/data/platform/dbchangelog/4.5/dbchangelog-4.5.xsd",
      "  http://www.liquibase.org/xml/ns/dbchangelog-ext http://artifactory.control-plane-nexus/nexus/repository/extensions/com/epam/digital/data/platform/liquibase-ext-schema/latest/liquibase-ext-schema-latest.xsd\">",
      "$1",
      "</databaseChangeLog>"
    ],
    "description": "databaseChangeLog liquibase tag",
    "scope": "xml"
  },
  "changeSet": {
    "prefix": [
      "changeset",
      "chst"
    ],
    "body": [
      "<changeSet author=\"$1\" id=\"$2\">",
      "  $3",
      "</changeSet>"
    ],
    "description": "Liquibase changeset",
    "scope": "xml"
  },
  "createTable": {
    "prefix": "createtable",
    "body": [
      "<createTable tableName=\"$1\" ext:historyFlag=\"true\">",
      "  $2",
      "</createTable>"
    ],
    "description": "Liquibase createTable",
    "scope": "xml"
  },
  "column": {
    "prefix": [
      "column",
      "clmn",
      "cln"
    ],
    "body": [
      "<column name=\"$1\" type=\"$2\" ${3:remarks=\"$4\"}>",
      "  <constraints nullable=\"${5:false}\" />",
      "</column>"
    ],
    "description": "Liquibase column",
    "scope": "xml"
  },
  "idColumn": {
    "prefix": "idcolumn",
    "body": [
      "<column name=\"id\" type=\"UUID\" defaultValueComputed=\"uuid_generate_v4()\">",
      "  <constraints nullable=\"false\"",
      "               primaryKey=\"true\"",
      "               primaryKeyName=\"pk_$1\" />",
      "</column>"
    ],
    "description": "standard ID column for createTable",
    "scope": "xml"
  },
  "foreignKeyColumn": {
    "prefix": "fkcolumn",
    "body": [
      "<column name=\"$1\" type=\"${2:UUID}\">",
      "  <constraints",
      "    nullable=\"false\"",
      "    referencedTableName=\"$3\"",
      "    referencedColumnNames=\"${4:id}\"",
      "    foreignKeyName=\"fk_$5_$1_$3_$4\" />",
      "</column>"
    ],
    "description": "Liquibase column with foreign key constraint",
    "scope": "xml"
  },
  "createTableWithIdColumn": {
    "prefix": "createtable",
    "body": [
      "<createTable tableName=\"$1\" ext:historyFlag=\"true\">",
      "  <column name=\"id\" type=\"UUID\" defaultValueComputed=\"uuid_generate_v4()\">",
      "    <constraints nullable=\"false\"",
      "                 primaryKey=\"true\"",
      "                 primaryKeyName=\"pk_$1_id\" />",
      "  </column>",
      "  $2",
      "</createTable>"
    ],
    "description": "Liquibase create table with default id column",
    "scope": "xml"
  },
  "addUniqueConstraint": {
    "prefix": "addUniqueConstraint",
    "body": [
      "<addUniqueConstraint",
      "  constraintName=\"$1\"",
      "  tableName=\"$2\"",
      "  columnNames=\"${3:,}\" />"
    ],
    "description": "Liquibase unique constraint",
    "scope": "xml"
  },
  "createSearchCondition": {
    "prefix": "createSearchCondition",
    "body": [
      "<ext:createSearchCondition name=\"$1\">",
      "  <ext:table name=\"$2\">",
      "    <ext:column name=\"$3\" sorting=\"${4:asc}\" searchType=\"${5:contains}\" />",
      "  </ext:table>",
      "</ext:createSearchCondition>"
    ],
    "description": "Liquibase extension to create search condition",
    "scope": "xml"
  },
  "tableInSearchCondition": {
    "prefix": "table",
    "body": [
      "<ext:table name=\"$1\">",
      "  <ext:column name=\"$2\" />",
      "</ext:table>"
    ],
    "description": "table Liquibase extension tag to use in search conditions",
    "scope": "xml"
  },
  "whereExt": {
    "prefix": "where",
    "body": [
      "<ext:where>",
      "  <ext:condition columnName=\"$1\" operator=\"${2:eq}\" value=\"$3\"/>",
			"</ext:where>"
    ],
    "description": "Liquibase where extension for searches",
    "scope": "xml"
  },
  "joinBasic": {
    "prefix": "join",
    "body": [
      "<ext:join type=\"${1:inner}\">",
      "  <ext:left alias=\"$2\">",
      "    <ext:column name=\"$3\" />",
      "  </ext:left>",
      "  <ext:right alias=\"$4\">",
      "    <ext:column name=\"$5\" />",
      "  </ext:right>",
      "</ext:join>"
    ],
    "description": "base Liquibase join for searchConditions",
    "scope": "xml"
  },
  "joinWithCondition": {
    "prefix": "joinc",
    "body": [
      "<ext:join type=\"${1:inner}\">",
      "  <ext:left alias=\"$2\">",
      "    <ext:column name=\"$3\" />",
      "  </ext:left>",
      "  <ext:right alias=\"$4\">",
      "    <ext:column name=\"$5\" />",
      "  </ext:right>",
      "  <ext:condition",
      "    logicOperator=\"${6:and}\"",
      "    tableAlias=\"$7\"",
      "    columnName=\"$8\"",
      "    operator=\"$9\"",
      "    value=\"$10\" />",
      "</ext:join>"
    ],
    "description": "base Liquibase join for searchConditions",
    "scope": "xml"
  },
  "labelExtension": {
    "prefix": "label",
    "body": "<ext:label translation=\"$2\">$1</ext:label>",
    "description": "label Liquibase extension for createType",
    "scope": "xml"
  },
  "createType": {
    "prefix": "createType",
    "body": [
      "<ext:createType name=\"$1\">",
      "  $2",
      "</ext:createType>"
    ],
    "description": "createType Liquibase extension",
    "scope": "xml"
  },
  "createEnum": {
    "prefix": "enum",
    "body": [
      "<ext:createType name=\"$1\">",
			"  <ext:asEnum>",
			"  	<ext:label translation=\"$3\">$2</ext:label>",
			"  </ext:asEnum>",
      "</ext:createType>"
    ],
    "description": "Liquibase create enum using createType extension",
    "scope": "xml"
  }
}
